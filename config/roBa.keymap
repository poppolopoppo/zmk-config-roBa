#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    tapping-term-ms = <175>;
    flavor = "tap-preferred";
    quick-tap-ms = <200>;
    global-quick-tap;
};

&lt {
    flavor = "tap-preferred";
    tapping-term-ms = <175>;
};

&sl {
    release-after-ms = <2000>;
    quick-release;
};

&sk {
    release-after-ms = <2000>;
    quick-release;
};

&caps_word {
  continue-list = <UNDERSCORE MINUS BACKSPACE DELETE>;
};

&trackball {
    automouse-layer = <4>;
    scroll-layers = <5>;
    snipe-layers = <7>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
            layers = <0>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
            layers = <0>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
            layers = <0 2>;
        };

        ctrl+alt+del {
            bindings = <&kp LC(LA(DELETE))>;
            key-positions = <34 42>;
        };

        Gaming {
            bindings = <&tog 8>;
            key-positions = <0 1 8 9>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        ac_ccdi: ac_ccdi {
            wait-ms = <0>;
            tap-ms = <0>;
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LALT>
                , <&macro_tap &kp C>
                , <&macro_release &kp LALT>
                ;
            label = "ç";
        };

        ac_agrv_l: ac_agrv_l {
            wait-ms = <0>;
            tap-ms = <0>;
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LALT>
                , <&macro_tap &kp GRAVE>
                , <&macro_release &kp LALT>
                , <&macro_tap &kp A>
                ;
            label = "à";
        };
        ac_agrv_u: ac_agrv_u {
            wait-ms = <0>;
            tap-ms = <0>;
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_release &kp LSHFT>
                , <&macro_press &kp LALT>
                , <&macro_tap &kp GRAVE>
                , <&macro_release &kp LALT>
                , <&macro_press &kp LSHFT>
                , <&macro_tap &kp A>
                , <&macro_release &kp LSHFT>
                ;
            label = "À";
        };
        ac_agrv: ac_agrv {
            label = "àÀ";
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&ac_agrv_l>, <&ac_agrv_u>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ac_egrv_l: ac_egrv_l {
            wait-ms = <0>;
            tap-ms = <0>;
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LALT>
                , <&macro_tap &kp GRAVE>
                , <&macro_release &kp LALT>
                , <&macro_tap &kp E>
                ;
            label = "è";
        };
        ac_egrv_u: ac_egrv_u {
            wait-ms = <0>;
            tap-ms = <0>;
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_release &kp LSHFT>
                , <&macro_press &kp LALT>
                , <&macro_tap &kp GRAVE>
                , <&macro_release &kp LALT>
                , <&macro_press &kp LSHFT>
                , <&macro_tap &kp E>
                , <&macro_release &kp LSHFT>
                ;
            label = "È";
        };
        ac_egrv: ac_egrv {
            label = "èÈ";
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&ac_egrv_l>, <&ac_egrv_u>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ac_eacu_l: ac_eacu_l {
            wait-ms = <0>;
            tap-ms = <0>;
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LALT>
                , <&macro_tap &kp E>
                , <&macro_release &kp LALT>
                , <&macro_tap &kp E>
                ;
            label = "é";
        };
        ac_eacu_u: ac_eacu_u {
            wait-ms = <0>;
            tap-ms = <0>;
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_release &kp LSHFT>
                , <&macro_press &kp LALT>
                , <&macro_tap &kp E>
                , <&macro_release &kp LALT>
                , <&macro_press &kp LSHFT>
                , <&macro_tap &kp E>
                , <&macro_release &kp LSHFT>
                ;
            label = "É";
        };
        ac_eacu: ac_eacu {
            label = "éÉ";
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&ac_eacu_l>, <&ac_eacu_u>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ac_ugrv_l: ac_ugrv_l {
            wait-ms = <0>;
            tap-ms = <0>;
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LALT>
                , <&macro_tap &kp GRAVE>
                , <&macro_release &kp LALT>
                , <&macro_tap &kp U>
                ;
            label = "ù";
        };
        ac_ugrv_u: ac_ugrv_u {
            wait-ms = <0>;
            tap-ms = <0>;
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_release &kp LSHFT>
                , <&macro_press &kp LALT>
                , <&macro_tap &kp GRAVE>
                , <&macro_release &kp LALT>
                , <&macro_press &kp LSHFT>
                , <&macro_tap &kp U>
                , <&macro_release &kp LSHFT>
                ;
            label = "Ù";
        };
        ac_ugrv: ac_ugrv {
            label = "ùÙ";
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&ac_ugrv_l>, <&ac_ugrv_u>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ac_ocir_l: ac_ocir_l {
            wait-ms = <0>;
            tap-ms = <0>;
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LALT>
                , <&macro_tap &kp I>
                , <&macro_release &kp LALT>
                , <&macro_tap &kp O>
                ;
            label = "ô";
        };
        ac_ocir_u: ac_ocir_u {
            wait-ms = <0>;
            tap-ms = <0>;
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_release &kp LSHFT>
                , <&macro_press &kp LALT>
                , <&macro_tap &kp I>
                , <&macro_release &kp LALT>
                , <&macro_press &kp LSHFT>
                , <&macro_tap &kp O>
                , <&macro_release &kp LSHFT>
                ;
            label = "Ô";
        };
        ac_ocir: ac_ocir {
            label = "ôÔ";
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&ac_ugrv_l>, <&ac_ugrv_u>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W         &kp E         &kp R  &kp T                                                          &kp Y        &kp U  &lt 5 I    &kp O    &kp P
&kp A             &kp S         &kp D         &kp F  &kp G  &kp LG(LS(S))               &kp MINUS                   &kp H        &kp J  &kp K      &kp L    &kp SQT
&mt LEFT_SHIFT Z  &kp X         &kp C         &kp V  &kp B  &kp COLON                   &lt_to_layer_0 9 SEMICOLON  &kp N        &kp M  &kp COMMA  &kp DOT  &mt RIGHT_SHIFT SLASH
&kp LCTRL         &kp LEFT_WIN  &kp LEFT_ALT  &mo 6  &mo 2  &lt_to_layer_0 3 SPACE      &kp BACKSPACE               &lt 1 ENTER                             &lt_to_layer_0 7 DEL
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        FUNCTION {
            bindings = <
&trans  &trans  &trans  &trans  &trans                       &kp F1  &kp F2  &kp F3  &kp F4  &kp F5
&trans  &trans  &trans  &trans  &trans  &trans      &kp F13  &kp F6  &kp F7  &kp F8  &kp F9  &kp F10
&trans  &trans  &trans  &trans  &trans  &trans      &trans   &trans  &trans  &trans  &trans  &kp F11
&trans  &trans  &trans  &trans  &trans  &trans      &trans   &trans                          &kp F12
            >;

            sensor-bindings = <&inc_dec_kp LS(TAB) TAB>;
        };

        NUM {
            bindings = <
&kp MINUS                   &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp PLUS                                                   &kp CARET         &kp AMPERSAND      &kp TILDE       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&kp SLASH                   &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp ASTERISK  &kp LC(LA(KP_NUMBER_0))      &kp UNDERSCORE  &kp EXCLAMATION   &kp AT_SIGN        &kp HASH        &kp DOLLAR            &kp PERCENT
&mt LEFT_SHIFT KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp PERIOD    &kp EQUAL                    &kp GRAVE       &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_BRACE  &kp RIGHT_BRACE       &kp BACKSLASH
&trans                      &trans           &trans           &trans           &trans        &trans                       &trans          &trans                                                                     &kp PIPE
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))     &kp UP_ARROW    &kp LC(TAB)          &trans                              &trans    &kp LS(LA(TAB))  &kp UP    &kp LA(TAB)  &kp BACKSPACE
&kp HOME        &kp LEFT_ARROW      &kp DOWN_ARROW  &kp RIGHT_ARROW      &kp END  &trans      &kp PAGE_UP    &kp HOME  &kp LEFT         &kp DOWN  &kp RIGHT    &kp END
&kp LEFT_SHIFT  &kp LG(LEFT_ARROW)  &trans          &kp LG(RIGHT_ARROW)  &trans   &trans      &kp PAGE_DOWN  &trans    &none            &trans    &none        &caps_word
&trans          &trans              &trans          &trans               &trans   &trans      &trans         &trans                                            &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB4  &trans    &mkp MB5  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        SERVICE {
            bindings = <
&trans  &trans        &trans            &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &kp C_PREV    &kp C_PLAY_PAUSE  &kp C_NEXT    &trans  &bootloader      &trans  &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2      &kp NUMBER_3  &trans  &trans           &trans  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans            &trans        &trans  &trans           &trans  &trans                                                  &bt BT_CLR_ALL
            >;
        };

        SNIPE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB4  &trans    &mkp MB5  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;
        };

        GAMING {
            bindings = <
&kp ESCAPE  &kp N1          &kp N2  &kp N3  &kp N4                           &kp N5     &kp N6  &kp N7  &kp N8    &kp N9
&kp TAB     &kp Q           &kp W   &kp E   &kp R   &kp T          &kp Y     &kp U      &kp I   &kp O   &kp P     &kp LBKT
&kp LSHFT   &kp A           &kp S   &kp D   &kp F   &kp G          &kp H     &kp J      &kp K   &kp L   &kp SEMI  &kp APOS
&kp LCTRL   &mt LEFT_ALT Z  &kp X   &kp C   &kp V   &kp SPACE      &kp BSPC  &kp ENTER                            &kp LALT
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        ACCENTS {
            bindings = <
&trans     &trans  &ac_egrv   &ac_eacu   &trans                      &trans  &ac_ugrv   &trans   &ac_ocir   &trans
&ac_agrv   &trans  &trans     &trans     &trans  &trans      &trans  &trans  &trans     &trans   &trans     &trans
&trans     &trans  &trans     &trans     &trans  &trans      &trans  &trans  &trans     &trans   &trans     &trans
&trans     &trans  &trans     &ac_ccdi   &trans  &trans      &trans  &trans                                 &trans
            >;
        };
    };
};
